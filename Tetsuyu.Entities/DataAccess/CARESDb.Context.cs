//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tetsuyu.Entities.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DEV_CARES_C4WX1Entities1 : DbContext
    {
        public DEV_CARES_C4WX1Entities1()
            : base("name=DEV_CARES_C4WX1Entities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<AMTQuestion> AMTQuestions { get; set; }
        public virtual DbSet<APIAccessKey> APIAccessKeys { get; set; }
        public virtual DbSet<APIMonitor> APIMonitors { get; set; }
        public virtual DbSet<APIOrder> APIOrders { get; set; }
        public virtual DbSet<APIOrderAllergy> APIOrderAllergies { get; set; }
        public virtual DbSet<APIOrderDiagnosi> APIOrderDiagnosis { get; set; }
        public virtual DbSet<APIOrderMedication> APIOrderMedications { get; set; }
        public virtual DbSet<APIOrderTask> APIOrderTasks { get; set; }
        public virtual DbSet<APNSNotification> APNSNotifications { get; set; }
        public virtual DbSet<AuditTrail> AuditTrails { get; set; }
        public virtual DbSet<BillingInvoice> BillingInvoices { get; set; }
        public virtual DbSet<BillingInvoiceConsumable> BillingInvoiceConsumables { get; set; }
        public virtual DbSet<BillingInvoiceService> BillingInvoiceServices { get; set; }
        public virtual DbSet<BillingPackage> BillingPackages { get; set; }
        public virtual DbSet<BillingPackageInformation> BillingPackageInformations { get; set; }
        public virtual DbSet<BillingPackageRequest> BillingPackageRequests { get; set; }
        public virtual DbSet<BillingProposal> BillingProposals { get; set; }
        public virtual DbSet<BillingProposalService> BillingProposalServices { get; set; }
        public virtual DbSet<BillingService> BillingServices { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<CarePlan> CarePlans { get; set; }
        public virtual DbSet<CarePlanDetail> CarePlanDetails { get; set; }
        public virtual DbSet<CarePlanStatu> CarePlanStatus { get; set; }
        public virtual DbSet<CarePlanSub> CarePlanSubs { get; set; }
        public virtual DbSet<CarePlanSubGoal> CarePlanSubGoals { get; set; }
        public virtual DbSet<CarePlanSubProblemList> CarePlanSubProblemLists { get; set; }
        public virtual DbSet<CarePlanSubProblemListGoal> CarePlanSubProblemListGoals { get; set; }
        public virtual DbSet<CareReport> CareReports { get; set; }
        public virtual DbSet<CareReportConfig> CareReportConfigs { get; set; }
        public virtual DbSet<CareReportRehabilitation> CareReportRehabilitations { get; set; }
        public virtual DbSet<CareReportSocialSupport> CareReportSocialSupports { get; set; }
        public virtual DbSet<CareReportSystemInfo> CareReportSystemInfoes { get; set; }
        public virtual DbSet<Chat> Chats { get; set; }
        public virtual DbSet<Code> Codes { get; set; }
        public virtual DbSet<CodeType> CodeTypes { get; set; }
        public virtual DbSet<CPGoal> CPGoals { get; set; }
        public virtual DbSet<Diagnosi> Diagnosis { get; set; }
        public virtual DbSet<DischargeSummaryReport> DischargeSummaryReports { get; set; }
        public virtual DbSet<DischargeSummaryReportAttachment> DischargeSummaryReportAttachments { get; set; }
        public virtual DbSet<Disease> Diseases { get; set; }
        public virtual DbSet<DiseaseInfo> DiseaseInfoes { get; set; }
        public virtual DbSet<DiseaseSubInfo> DiseaseSubInfoes { get; set; }
        public virtual DbSet<DiseaseVitalSignType> DiseaseVitalSignTypes { get; set; }
        public virtual DbSet<EBASDEPQuestion> EBASDEPQuestions { get; set; }
        public virtual DbSet<EmailLog> EmailLogs { get; set; }
        public virtual DbSet<Enquiry> Enquiries { get; set; }
        public virtual DbSet<EnquiryAttachment> EnquiryAttachments { get; set; }
        public virtual DbSet<EnquiryConfig> EnquiryConfigs { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventUser> EventUsers { get; set; }
        public virtual DbSet<EventUserLog> EventUserLogs { get; set; }
        public virtual DbSet<ExternalDoctor> ExternalDoctors { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<GroupRole> GroupRoles { get; set; }
        public virtual DbSet<InitialCareAssessment> InitialCareAssessments { get; set; }
        public virtual DbSet<InitialCareAssessmentAttachment> InitialCareAssessmentAttachments { get; set; }
        public virtual DbSet<InitialCareAssessmentSpecialInstruction> InitialCareAssessmentSpecialInstructions { get; set; }
        public virtual DbSet<InitialCareAssessmentVitalSign> InitialCareAssessmentVitalSigns { get; set; }
        public virtual DbSet<Intervention> Interventions { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemStock> ItemStocks { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LoginDevice> LoginDevices { get; set; }
        public virtual DbSet<MailSetting> MailSettings { get; set; }
        public virtual DbSet<MedicationVitalSignType> MedicationVitalSignTypes { get; set; }
        public virtual DbSet<MultiDisciplinaryMeeting> MultiDisciplinaryMeetings { get; set; }
        public virtual DbSet<MultiDisciplinaryMeetingDetail> MultiDisciplinaryMeetingDetails { get; set; }
        public virtual DbSet<NotificationChat> NotificationChats { get; set; }
        public virtual DbSet<NotificationEvent> NotificationEvents { get; set; }
        public virtual DbSet<NotificationMessageTemplate> NotificationMessageTemplates { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationTask> NotificationTasks { get; set; }
        public virtual DbSet<NotificationVitalSignDetail> NotificationVitalSignDetails { get; set; }
        public virtual DbSet<NutritionTask> NutritionTasks { get; set; }
        public virtual DbSet<NutritionTaskReference> NutritionTaskReferences { get; set; }
        public virtual DbSet<Otp> Otps { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientAccessLine> PatientAccessLines { get; set; }
        public virtual DbSet<PatientAdditionalInfo> PatientAdditionalInfoes { get; set; }
        public virtual DbSet<PatientAMT> PatientAMTs { get; set; }
        public virtual DbSet<PatientAMTAnswer> PatientAMTAnswers { get; set; }
        public virtual DbSet<PatientAttachment> PatientAttachments { get; set; }
        public virtual DbSet<PatientBradenScale> PatientBradenScales { get; set; }
        public virtual DbSet<PatientClinician> PatientClinicians { get; set; }
        public virtual DbSet<PatientDrugAllergy> PatientDrugAllergies { get; set; }
        public virtual DbSet<PatientEBASDEP> PatientEBASDEPs { get; set; }
        public virtual DbSet<PatientEBASDEPAnswer> PatientEBASDEPAnswers { get; set; }
        public virtual DbSet<PatientFamilyHistory> PatientFamilyHistories { get; set; }
        public virtual DbSet<PatientGC> PatientGCS { get; set; }
        public virtual DbSet<PatientImmunisation> PatientImmunisations { get; set; }
        public virtual DbSet<PatientMBI> PatientMBIs { get; set; }
        public virtual DbSet<PatientMedicalHistory> PatientMedicalHistories { get; set; }
        public virtual DbSet<PatientMedication> PatientMedications { get; set; }
        public virtual DbSet<PatientMedicationConsume> PatientMedicationConsumes { get; set; }
        public virtual DbSet<PatientMedicationConsumeAttachment> PatientMedicationConsumeAttachments { get; set; }
        public virtual DbSet<PatientMF> PatientMFS { get; set; }
        public virtual DbSet<PatientMMSE> PatientMMSEs { get; set; }
        public virtual DbSet<PatientNutrition> PatientNutritions { get; set; }
        public virtual DbSet<PatientOtherAllergy> PatientOtherAllergies { get; set; }
        public virtual DbSet<PatientProfile> PatientProfiles { get; set; }
        public virtual DbSet<PatientRAF> PatientRAFs { get; set; }
        public virtual DbSet<PatientReferral> PatientReferrals { get; set; }
        public virtual DbSet<PatientSocialSupport> PatientSocialSupports { get; set; }
        public virtual DbSet<PatientWound> PatientWounds { get; set; }
        public virtual DbSet<PatientWoundVisit> PatientWoundVisits { get; set; }
        public virtual DbSet<PatientWoundVisitClinician> PatientWoundVisitClinicians { get; set; }
        public virtual DbSet<PatientWoundVisitTreatment> PatientWoundVisitTreatments { get; set; }
        public virtual DbSet<PatientWoundVisitTreatmentList> PatientWoundVisitTreatmentLists { get; set; }
        public virtual DbSet<ProblemList> ProblemLists { get; set; }
        public virtual DbSet<ProblemListGoal> ProblemListGoals { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<ReceiptForInvoice> ReceiptForInvoices { get; set; }
        public virtual DbSet<RecentView> RecentViews { get; set; }
        public virtual DbSet<ResidentAssessmentCategory> ResidentAssessmentCategories { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<ScheduledTask> ScheduledTasks { get; set; }
        public virtual DbSet<ServiceForBilling> ServiceForBillings { get; set; }
        public virtual DbSet<ServiceForBillingCost> ServiceForBillingCosts { get; set; }
        public virtual DbSet<SyncPatientLog> SyncPatientLogs { get; set; }
        public virtual DbSet<SyncWoundLog> SyncWoundLogs { get; set; }
        public virtual DbSet<SyncWoundVisitLog> SyncWoundVisitLogs { get; set; }
        public virtual DbSet<SysConfig> SysConfigs { get; set; }
        public virtual DbSet<SystemForDisease> SystemForDiseases { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskFileAttachment> TaskFileAttachments { get; set; }
        public virtual DbSet<TaskSpecificDate> TaskSpecificDates { get; set; }
        public virtual DbSet<TaskUser> TaskUsers { get; set; }
        public virtual DbSet<TaskUserLog> TaskUserLogs { get; set; }
        public virtual DbSet<TaskUserLogAttachment> TaskUserLogAttachments { get; set; }
        public virtual DbSet<TD_WoundAssessmentFactor> TD_WoundAssessmentFactor { get; set; }
        public virtual DbSet<TeleconsultationRecording> TeleconsultationRecordings { get; set; }
        public virtual DbSet<TeleconsultationReport> TeleconsultationReports { get; set; }
        public virtual DbSet<Threshold> Thresholds { get; set; }
        public virtual DbSet<TreatmentListItem> TreatmentListItems { get; set; }
        public virtual DbSet<TreatmentTOL> TreatmentTOLs { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<UserAddress> UserAddresses { get; set; }
        public virtual DbSet<UserCategory> UserCategories { get; set; }
        public virtual DbSet<UserCategoryRole> UserCategoryRoles { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<UUIDLog> UUIDLogs { get; set; }
        public virtual DbSet<VitalSignDetail> VitalSignDetails { get; set; }
        public virtual DbSet<VitalSignRelationship> VitalSignRelationships { get; set; }
        public virtual DbSet<VitalSign> VitalSigns { get; set; }
        public virtual DbSet<VitalSignType> VitalSignTypes { get; set; }
        public virtual DbSet<VitalSignTypeThreshold> VitalSignTypeThresholds { get; set; }
        public virtual DbSet<Audit_Activity> Audit_Activity { get; set; }
        public virtual DbSet<Audit_AMTQuestion> Audit_AMTQuestion { get; set; }
        public virtual DbSet<Audit_APIAccessKey> Audit_APIAccessKey { get; set; }
        public virtual DbSet<Audit_APIMonitor> Audit_APIMonitor { get; set; }
        public virtual DbSet<Audit_APIOrder> Audit_APIOrder { get; set; }
        public virtual DbSet<Audit_APIOrderAllergy> Audit_APIOrderAllergy { get; set; }
        public virtual DbSet<Audit_APIOrderDiagnosis> Audit_APIOrderDiagnosis { get; set; }
        public virtual DbSet<Audit_APIOrderMedication> Audit_APIOrderMedication { get; set; }
        public virtual DbSet<Audit_APIOrderTask> Audit_APIOrderTask { get; set; }
        public virtual DbSet<Audit_APNSNotification> Audit_APNSNotification { get; set; }
        public virtual DbSet<Audit_BillingInvoice> Audit_BillingInvoice { get; set; }
        public virtual DbSet<Audit_BillingInvoiceConsumable> Audit_BillingInvoiceConsumable { get; set; }
        public virtual DbSet<Audit_BillingInvoiceService> Audit_BillingInvoiceService { get; set; }
        public virtual DbSet<Audit_BillingPackage> Audit_BillingPackage { get; set; }
        public virtual DbSet<Audit_BillingPackageInformation> Audit_BillingPackageInformation { get; set; }
        public virtual DbSet<Audit_BillingPackageRequest> Audit_BillingPackageRequest { get; set; }
        public virtual DbSet<Audit_BillingProposal> Audit_BillingProposal { get; set; }
        public virtual DbSet<Audit_BillingProposalService> Audit_BillingProposalService { get; set; }
        public virtual DbSet<Audit_BillingService> Audit_BillingService { get; set; }
        public virtual DbSet<Audit_Branch> Audit_Branch { get; set; }
        public virtual DbSet<Audit_CarePlan> Audit_CarePlan { get; set; }
        public virtual DbSet<Audit_CarePlanDetail> Audit_CarePlanDetail { get; set; }
        public virtual DbSet<Audit_CarePlanStatus> Audit_CarePlanStatus { get; set; }
        public virtual DbSet<Audit_CarePlanSub> Audit_CarePlanSub { get; set; }
        public virtual DbSet<Audit_CarePlanSubActivity> Audit_CarePlanSubActivity { get; set; }
        public virtual DbSet<Audit_CarePlanSubCPGoals> Audit_CarePlanSubCPGoals { get; set; }
        public virtual DbSet<Audit_CarePlanSubGoal> Audit_CarePlanSubGoal { get; set; }
        public virtual DbSet<Audit_CarePlanSubIntervention> Audit_CarePlanSubIntervention { get; set; }
        public virtual DbSet<Audit_CarePlanSubProblemList> Audit_CarePlanSubProblemList { get; set; }
        public virtual DbSet<Audit_CarePlanSubProblemListGoal> Audit_CarePlanSubProblemListGoal { get; set; }
        public virtual DbSet<Audit_CareReport> Audit_CareReport { get; set; }
        public virtual DbSet<Audit_CareReportConfig> Audit_CareReportConfig { get; set; }
        public virtual DbSet<Audit_CareReportRehabilitation> Audit_CareReportRehabilitation { get; set; }
        public virtual DbSet<Audit_CareReportSocialSupport> Audit_CareReportSocialSupport { get; set; }
        public virtual DbSet<Audit_CareReportSystemInfo> Audit_CareReportSystemInfo { get; set; }
        public virtual DbSet<Audit_Chat> Audit_Chat { get; set; }
        public virtual DbSet<Audit_Code> Audit_Code { get; set; }
        public virtual DbSet<Audit_CodeType> Audit_CodeType { get; set; }
        public virtual DbSet<Audit_CPGoals> Audit_CPGoals { get; set; }
        public virtual DbSet<Audit_Diagnosis> Audit_Diagnosis { get; set; }
        public virtual DbSet<Audit_DischargeSummaryReport> Audit_DischargeSummaryReport { get; set; }
        public virtual DbSet<Audit_DischargeSummaryReportAttachment> Audit_DischargeSummaryReportAttachment { get; set; }
        public virtual DbSet<Audit_Disease> Audit_Disease { get; set; }
        public virtual DbSet<Audit_DiseaseInfo> Audit_DiseaseInfo { get; set; }
        public virtual DbSet<Audit_DiseaseSubInfo> Audit_DiseaseSubInfo { get; set; }
        public virtual DbSet<Audit_DiseaseVitalSignType> Audit_DiseaseVitalSignType { get; set; }
        public virtual DbSet<Audit_EBASDEPQuestion> Audit_EBASDEPQuestion { get; set; }
        public virtual DbSet<Audit_Enquiry> Audit_Enquiry { get; set; }
        public virtual DbSet<Audit_EnquiryAttachment> Audit_EnquiryAttachment { get; set; }
        public virtual DbSet<Audit_EnquiryConfig> Audit_EnquiryConfig { get; set; }
        public virtual DbSet<Audit_EnquiryEscPerson> Audit_EnquiryEscPerson { get; set; }
        public virtual DbSet<Audit_EnquiryLanguage> Audit_EnquiryLanguage { get; set; }
        public virtual DbSet<Audit_EnquirySCM> Audit_EnquirySCM { get; set; }
        public virtual DbSet<Audit_EnquiryServicesRequired> Audit_EnquiryServicesRequired { get; set; }
        public virtual DbSet<Audit_Event> Audit_Event { get; set; }
        public virtual DbSet<Audit_EventUser> Audit_EventUser { get; set; }
        public virtual DbSet<Audit_EventUserLog> Audit_EventUserLog { get; set; }
        public virtual DbSet<Audit_ExternalDoctor> Audit_ExternalDoctor { get; set; }
        public virtual DbSet<Audit_Group> Audit_Group { get; set; }
        public virtual DbSet<Audit_GroupRole> Audit_GroupRole { get; set; }
        public virtual DbSet<Audit_ICAWoundCare> Audit_ICAWoundCare { get; set; }
        public virtual DbSet<Audit_InitialCareAssessment> Audit_InitialCareAssessment { get; set; }
        public virtual DbSet<Audit_InitialCareAssessmentAttachment> Audit_InitialCareAssessmentAttachment { get; set; }
        public virtual DbSet<Audit_InitialCareAssessmentSpecialInstruction> Audit_InitialCareAssessmentSpecialInstruction { get; set; }
        public virtual DbSet<Audit_InitialCareAssessmentVitalSign> Audit_InitialCareAssessmentVitalSign { get; set; }
        public virtual DbSet<Audit_Intervention> Audit_Intervention { get; set; }
        public virtual DbSet<Audit_Item> Audit_Item { get; set; }
        public virtual DbSet<Audit_ItemStock> Audit_ItemStock { get; set; }
        public virtual DbSet<Audit_LoginDevice> Audit_LoginDevice { get; set; }
        public virtual DbSet<Audit_MailSettings> Audit_MailSettings { get; set; }
        public virtual DbSet<Audit_MedicationVitalSignType> Audit_MedicationVitalSignType { get; set; }
        public virtual DbSet<Audit_MultiDisciplinaryMeeting> Audit_MultiDisciplinaryMeeting { get; set; }
        public virtual DbSet<Audit_MultiDisciplinaryMeetingDetail> Audit_MultiDisciplinaryMeetingDetail { get; set; }
        public virtual DbSet<Audit_NotificationChat> Audit_NotificationChat { get; set; }
        public virtual DbSet<Audit_NotificationEvent> Audit_NotificationEvent { get; set; }
        public virtual DbSet<Audit_NotificationMessageTemplates> Audit_NotificationMessageTemplates { get; set; }
        public virtual DbSet<Audit_Notifications> Audit_Notifications { get; set; }
        public virtual DbSet<Audit_NotificationTask> Audit_NotificationTask { get; set; }
        public virtual DbSet<Audit_NotificationVitalSignDetails> Audit_NotificationVitalSignDetails { get; set; }
        public virtual DbSet<Audit_NutritionTask> Audit_NutritionTask { get; set; }
        public virtual DbSet<Audit_NutritionTaskReference> Audit_NutritionTaskReference { get; set; }
        public virtual DbSet<Audit_Otp> Audit_Otp { get; set; }
        public virtual DbSet<Audit_Package> Audit_Package { get; set; }
        public virtual DbSet<Audit_Patient> Audit_Patient { get; set; }
        public virtual DbSet<Audit_PatientAccessLine> Audit_PatientAccessLine { get; set; }
        public virtual DbSet<Audit_PatientAdditionalInfo> Audit_PatientAdditionalInfo { get; set; }
        public virtual DbSet<Audit_PatientAMT> Audit_PatientAMT { get; set; }
        public virtual DbSet<Audit_PatientAMTAnswer> Audit_PatientAMTAnswer { get; set; }
        public virtual DbSet<Audit_PatientAttachment> Audit_PatientAttachment { get; set; }
        public virtual DbSet<Audit_PatientBradenScale> Audit_PatientBradenScale { get; set; }
        public virtual DbSet<Audit_PatientClinician> Audit_PatientClinician { get; set; }
        public virtual DbSet<Audit_PatientDrugAllergy> Audit_PatientDrugAllergy { get; set; }
        public virtual DbSet<Audit_PatientEBASDEP> Audit_PatientEBASDEP { get; set; }
        public virtual DbSet<Audit_PatientEBASDEPAnswer> Audit_PatientEBASDEPAnswer { get; set; }
        public virtual DbSet<Audit_PatientFamilyHistory> Audit_PatientFamilyHistory { get; set; }
        public virtual DbSet<Audit_PatientGCS> Audit_PatientGCS { get; set; }
        public virtual DbSet<Audit_PatientImmunisation> Audit_PatientImmunisation { get; set; }
        public virtual DbSet<Audit_PatientLanguage> Audit_PatientLanguage { get; set; }
        public virtual DbSet<Audit_PatientMBI> Audit_PatientMBI { get; set; }
        public virtual DbSet<Audit_PatientMedicalHistory> Audit_PatientMedicalHistory { get; set; }
        public virtual DbSet<Audit_PatientMedication> Audit_PatientMedication { get; set; }
        public virtual DbSet<Audit_PatientMedicationConsume> Audit_PatientMedicationConsume { get; set; }
        public virtual DbSet<Audit_PatientMedicationConsumeAttachment> Audit_PatientMedicationConsumeAttachment { get; set; }
        public virtual DbSet<Audit_PatientMedicationSupply> Audit_PatientMedicationSupply { get; set; }
        public virtual DbSet<Audit_PatientMFS> Audit_PatientMFS { get; set; }
        public virtual DbSet<Audit_PatientMMSE> Audit_PatientMMSE { get; set; }
        public virtual DbSet<Audit_PatientNutrition> Audit_PatientNutrition { get; set; }
        public virtual DbSet<Audit_PatientOtherAllergy> Audit_PatientOtherAllergy { get; set; }
        public virtual DbSet<Audit_PatientPackage> Audit_PatientPackage { get; set; }
        public virtual DbSet<Audit_PatientProfile> Audit_PatientProfile { get; set; }
        public virtual DbSet<Audit_PatientRAF> Audit_PatientRAF { get; set; }
        public virtual DbSet<Audit_PatientReferral> Audit_PatientReferral { get; set; }
        public virtual DbSet<Audit_PatientReferralService> Audit_PatientReferralService { get; set; }
        public virtual DbSet<Audit_PatientSocialSupport> Audit_PatientSocialSupport { get; set; }
        public virtual DbSet<Audit_PatientSpecialIndicator> Audit_PatientSpecialIndicator { get; set; }
        public virtual DbSet<Audit_PatientWound> Audit_PatientWound { get; set; }
        public virtual DbSet<Audit_PatientWoundVisit> Audit_PatientWoundVisit { get; set; }
        public virtual DbSet<Audit_PatientWoundVisitAppearance> Audit_PatientWoundVisitAppearance { get; set; }
        public virtual DbSet<Audit_PatientWoundVisitCleansingItem> Audit_PatientWoundVisitCleansingItem { get; set; }
        public virtual DbSet<Audit_PatientWoundVisitClinician> Audit_PatientWoundVisitClinician { get; set; }
        public virtual DbSet<Audit_PatientWoundVisitTreatment> Audit_PatientWoundVisitTreatment { get; set; }
        public virtual DbSet<Audit_PatientWoundVisitTreatmentList> Audit_PatientWoundVisitTreatmentList { get; set; }
        public virtual DbSet<Audit_PatientWoundVisitTreatmentObjectives> Audit_PatientWoundVisitTreatmentObjectives { get; set; }
        public virtual DbSet<Audit_ProblemList> Audit_ProblemList { get; set; }
        public virtual DbSet<Audit_ProblemListGoal> Audit_ProblemListGoal { get; set; }
        public virtual DbSet<Audit_Receipt> Audit_Receipt { get; set; }
        public virtual DbSet<Audit_ReceiptForInvoice> Audit_ReceiptForInvoice { get; set; }
        public virtual DbSet<Audit_RegisteredDevice> Audit_RegisteredDevice { get; set; }
        public virtual DbSet<Audit_ResidentAssessmentCategory> Audit_ResidentAssessmentCategory { get; set; }
        public virtual DbSet<Audit_Role> Audit_Role { get; set; }
        public virtual DbSet<Audit_ScheduledTasks> Audit_ScheduledTasks { get; set; }
        public virtual DbSet<Audit_ServiceForBilling> Audit_ServiceForBilling { get; set; }
        public virtual DbSet<Audit_ServiceForBillingCost> Audit_ServiceForBillingCost { get; set; }
        public virtual DbSet<Audit_ServiceSkillset> Audit_ServiceSkillset { get; set; }
        public virtual DbSet<Audit_SyncPatientLog> Audit_SyncPatientLog { get; set; }
        public virtual DbSet<Audit_SyncWoundLog> Audit_SyncWoundLog { get; set; }
        public virtual DbSet<Audit_SyncWoundVisitLog> Audit_SyncWoundVisitLog { get; set; }
        public virtual DbSet<Audit_SysConfig> Audit_SysConfig { get; set; }
        public virtual DbSet<Audit_SystemForDisease> Audit_SystemForDisease { get; set; }
        public virtual DbSet<Audit_Task> Audit_Task { get; set; }
        public virtual DbSet<Audit_TaskFileAttachment> Audit_TaskFileAttachment { get; set; }
        public virtual DbSet<Audit_TaskServicesRequired> Audit_TaskServicesRequired { get; set; }
        public virtual DbSet<Audit_TaskSpecificDate> Audit_TaskSpecificDate { get; set; }
        public virtual DbSet<Audit_TaskUser> Audit_TaskUser { get; set; }
        public virtual DbSet<Audit_TaskUserLog> Audit_TaskUserLog { get; set; }
        public virtual DbSet<Audit_TaskUserLogAttachment> Audit_TaskUserLogAttachment { get; set; }
        public virtual DbSet<Audit_TD_WoundAssessmentFactor> Audit_TD_WoundAssessmentFactor { get; set; }
        public virtual DbSet<Audit_TeleconsultationRecording> Audit_TeleconsultationRecording { get; set; }
        public virtual DbSet<Audit_TeleconsultationReport> Audit_TeleconsultationReport { get; set; }
        public virtual DbSet<Audit_Thresholds> Audit_Thresholds { get; set; }
        public virtual DbSet<Audit_TreatmentListItem> Audit_TreatmentListItem { get; set; }
        public virtual DbSet<Audit_TreatmentTOL> Audit_TreatmentTOL { get; set; }
        public virtual DbSet<Audit_Types> Audit_Types { get; set; }
        public virtual DbSet<Audit_UserAddress> Audit_UserAddress { get; set; }
        public virtual DbSet<Audit_UserBranch> Audit_UserBranch { get; set; }
        public virtual DbSet<Audit_UserCategory> Audit_UserCategory { get; set; }
        public virtual DbSet<Audit_UserCategoryRole> Audit_UserCategoryRole { get; set; }
        public virtual DbSet<Audit_UserLanguage> Audit_UserLanguage { get; set; }
        public virtual DbSet<Audit_UserOrganization> Audit_UserOrganization { get; set; }
        public virtual DbSet<Audit_UserRole> Audit_UserRole { get; set; }
        public virtual DbSet<Audit_Users> Audit_Users { get; set; }
        public virtual DbSet<Audit_UserSkillset> Audit_UserSkillset { get; set; }
        public virtual DbSet<Audit_UserType> Audit_UserType { get; set; }
        public virtual DbSet<Audit_UserUserType> Audit_UserUserType { get; set; }
        public virtual DbSet<Audit_VitalSignDetails> Audit_VitalSignDetails { get; set; }
        public virtual DbSet<Audit_VitalSignRelationships> Audit_VitalSignRelationships { get; set; }
        public virtual DbSet<Audit_VitalSigns> Audit_VitalSigns { get; set; }
        public virtual DbSet<Audit_VitalSignTypes> Audit_VitalSignTypes { get; set; }
        public virtual DbSet<Audit_VitalSignTypeThreshold> Audit_VitalSignTypeThreshold { get; set; }
        public virtual DbSet<RegisteredDevice> RegisteredDevices { get; set; }
        public virtual DbSet<vw_AssessmentDue> vw_AssessmentDue { get; set; }
        public virtual DbSet<vw_CarePlanSetup> vw_CarePlanSetup { get; set; }
        public virtual DbSet<vw_CarePlanSystemDisease> vw_CarePlanSystemDisease { get; set; }
        public virtual DbSet<vw_Doctors> vw_Doctors { get; set; }
        public virtual DbSet<vw_FalangaScores> vw_FalangaScores { get; set; }
        public virtual DbSet<vw_PatientAllLatestVitalSigns> vw_PatientAllLatestVitalSigns { get; set; }
        public virtual DbSet<vw_PatientBilling> vw_PatientBilling { get; set; }
        public virtual DbSet<vw_PatientDisease> vw_PatientDisease { get; set; }
        public virtual DbSet<vw_PatientLatestVitalSigns> vw_PatientLatestVitalSigns { get; set; }
        public virtual DbSet<vw_PatientWoundImageDownload> vw_PatientWoundImageDownload { get; set; }
        public virtual DbSet<vw_PushScores> vw_PushScores { get; set; }
        public virtual DbSet<vw_Teleconsultation> vw_Teleconsultation { get; set; }
    
        [DbFunction("DEV_CARES_C4WX1Entities1", "fn_Split")]
        public virtual IQueryable<fn_Split_Result> fn_Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_Split_Result>("[DEV_CARES_C4WX1Entities1].[fn_Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int spAddVitalSignThresholdDefaultIfEmpty(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddVitalSignThresholdDefaultIfEmpty", patientIdParameter);
        }
    
        public virtual int spDeleteTaskWithEmptyStatus(Nullable<int> taskId, Nullable<int> currentUserId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteTaskWithEmptyStatus", taskIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetNotificationAnalysis_Result> spGetNotificationAnalysis(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetNotificationAnalysis_Result>("spGetNotificationAnalysis", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetNotificationAnalysis_Count(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetNotificationAnalysis_Count", userIdParameter);
        }
    
        public virtual ObjectResult<spGetNotificationAnalysis_List_Result> spGetNotificationAnalysis_List(Nullable<int> userId, Nullable<int> pageIndex, Nullable<int> pageSize, string orderBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetNotificationAnalysis_List_Result>("spGetNotificationAnalysis_List", userIdParameter, pageIndexParameter, pageSizeParameter, orderByParameter);
        }
    
        public virtual ObjectResult<spGetPatientList_Result> spGetPatientList(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPatientList_Result>("spGetPatientList", userIdParameter);
        }
    
        public virtual ObjectResult<spGetPatientListAPI_Result> spGetPatientListAPI(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPatientListAPI_Result>("spGetPatientListAPI", userIdParameter);
        }
    
        public virtual ObjectResult<spGetTreatmentAnalysis_Result> spGetTreatmentAnalysis(Nullable<int> userId, Nullable<int> patientId, Nullable<int> patientWoundVisitId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            var patientWoundVisitIdParameter = patientWoundVisitId.HasValue ?
                new ObjectParameter("PatientWoundVisitId", patientWoundVisitId) :
                new ObjectParameter("PatientWoundVisitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTreatmentAnalysis_Result>("spGetTreatmentAnalysis", userIdParameter, patientIdParameter, patientWoundVisitIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spGetWoundInfectionStatus(Nullable<int> userId, Nullable<int> patientId, Nullable<int> patientWoundVisitId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            var patientWoundVisitIdParameter = patientWoundVisitId.HasValue ?
                new ObjectParameter("PatientWoundVisitId", patientWoundVisitId) :
                new ObjectParameter("PatientWoundVisitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spGetWoundInfectionStatus", userIdParameter, patientIdParameter, patientWoundVisitIdParameter);
        }
    
        public virtual int spInsertAlertNotification(string message, string title, Nullable<int> userID, Nullable<int> taskid, Nullable<bool> isCritical)
        {
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            var isCriticalParameter = isCritical.HasValue ?
                new ObjectParameter("isCritical", isCritical) :
                new ObjectParameter("isCritical", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertAlertNotification", messageParameter, titleParameter, userIDParameter, taskidParameter, isCriticalParameter);
        }
    
        public virtual int spInsertAlertNotificationBatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertAlertNotificationBatch");
        }
    
        public virtual ObjectResult<Nullable<bool>> spIsConflictUserTask(Nullable<int> userId, Nullable<int> taskId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> recurrence_Frequency, Nullable<int> recurrence_Days, Nullable<int> recurrence_Interval, Nullable<int> recurrence_IntervalFlag, string recurrence_SpecificDates)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var recurrence_FrequencyParameter = recurrence_Frequency.HasValue ?
                new ObjectParameter("Recurrence_Frequency", recurrence_Frequency) :
                new ObjectParameter("Recurrence_Frequency", typeof(int));
    
            var recurrence_DaysParameter = recurrence_Days.HasValue ?
                new ObjectParameter("Recurrence_Days", recurrence_Days) :
                new ObjectParameter("Recurrence_Days", typeof(int));
    
            var recurrence_IntervalParameter = recurrence_Interval.HasValue ?
                new ObjectParameter("Recurrence_Interval", recurrence_Interval) :
                new ObjectParameter("Recurrence_Interval", typeof(int));
    
            var recurrence_IntervalFlagParameter = recurrence_IntervalFlag.HasValue ?
                new ObjectParameter("Recurrence_IntervalFlag", recurrence_IntervalFlag) :
                new ObjectParameter("Recurrence_IntervalFlag", typeof(int));
    
            var recurrence_SpecificDatesParameter = recurrence_SpecificDates != null ?
                new ObjectParameter("Recurrence_SpecificDates", recurrence_SpecificDates) :
                new ObjectParameter("Recurrence_SpecificDates", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spIsConflictUserTask", userIdParameter, taskIdParameter, startDateParameter, endDateParameter, recurrence_FrequencyParameter, recurrence_DaysParameter, recurrence_IntervalParameter, recurrence_IntervalFlagParameter, recurrence_SpecificDatesParameter);
        }
    
        public virtual int spPostTaskRecurrenceData(Nullable<int> taskId, Nullable<int> userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> recurrence_Frequency, Nullable<int> recurrence_Days, Nullable<int> recurrence_Interval, Nullable<int> recurrence_IntervalFlag, string recurrence_SpecificDates, Nullable<int> currentUserId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var recurrence_FrequencyParameter = recurrence_Frequency.HasValue ?
                new ObjectParameter("Recurrence_Frequency", recurrence_Frequency) :
                new ObjectParameter("Recurrence_Frequency", typeof(int));
    
            var recurrence_DaysParameter = recurrence_Days.HasValue ?
                new ObjectParameter("Recurrence_Days", recurrence_Days) :
                new ObjectParameter("Recurrence_Days", typeof(int));
    
            var recurrence_IntervalParameter = recurrence_Interval.HasValue ?
                new ObjectParameter("Recurrence_Interval", recurrence_Interval) :
                new ObjectParameter("Recurrence_Interval", typeof(int));
    
            var recurrence_IntervalFlagParameter = recurrence_IntervalFlag.HasValue ?
                new ObjectParameter("Recurrence_IntervalFlag", recurrence_IntervalFlag) :
                new ObjectParameter("Recurrence_IntervalFlag", typeof(int));
    
            var recurrence_SpecificDatesParameter = recurrence_SpecificDates != null ?
                new ObjectParameter("Recurrence_SpecificDates", recurrence_SpecificDates) :
                new ObjectParameter("Recurrence_SpecificDates", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPostTaskRecurrenceData", taskIdParameter, userIdParameter, startDateParameter, endDateParameter, recurrence_FrequencyParameter, recurrence_DaysParameter, recurrence_IntervalParameter, recurrence_IntervalFlagParameter, recurrence_SpecificDatesParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spRptActualVsTarget_Result> spRptActualVsTarget(Nullable<int> target, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string status, string patientType, string filter)
        {
            var targetParameter = target.HasValue ?
                new ObjectParameter("target", target) :
                new ObjectParameter("target", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var patientTypeParameter = patientType != null ?
                new ObjectParameter("PatientType", patientType) :
                new ObjectParameter("PatientType", typeof(string));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptActualVsTarget_Result>("spRptActualVsTarget", targetParameter, startDateParameter, endDateParameter, statusParameter, patientTypeParameter, filterParameter);
        }
    
        public virtual ObjectResult<spRptProductivity_Result> spRptProductivity(Nullable<int> reportType, Nullable<int> userId, Nullable<int> userCategoryID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var reportTypeParameter = reportType.HasValue ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userCategoryIDParameter = userCategoryID.HasValue ?
                new ObjectParameter("UserCategoryID", userCategoryID) :
                new ObjectParameter("UserCategoryID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptProductivity_Result>("spRptProductivity", reportTypeParameter, userIdParameter, userCategoryIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spRptVisitDetail_Result> spRptVisitDetail(Nullable<int> userId, Nullable<int> userCategoryID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userCategoryIDParameter = userCategoryID.HasValue ?
                new ObjectParameter("UserCategoryID", userCategoryID) :
                new ObjectParameter("UserCategoryID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptVisitDetail_Result>("spRptVisitDetail", userIdParameter, userCategoryIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spRptVisitSummary_Result> spRptVisitSummary(Nullable<int> userId, Nullable<int> userCategoryID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userCategoryIDParameter = userCategoryID.HasValue ?
                new ObjectParameter("UserCategoryID", userCategoryID) :
                new ObjectParameter("UserCategoryID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptVisitSummary_Result>("spRptVisitSummary", userIdParameter, userCategoryIDParameter, startDateParameter, endDateParameter);
        }
    }
}
